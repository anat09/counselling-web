# Install dependencies only when needed
FROM node:16-alpine AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the preferred package manager
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i --frozen-lockfile; \
  else echo "Lockfile not found." && exit 1; \
  fi


# Rebuild the source code only when needed
FROM node:16-alpine AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Next.js collects completely anonymous telemetry data about general usage.
# Learn more here: https://nextjs.org/telemetry
# Uncomment the following line in case you want to disable telemetry during the build.
# ENV NEXT_TELEMETRY_DISABLED 1

RUN yarn build

# If using npm comment out above and use below instead
# RUN npm run build

# Production image, copy all the files and run next
FROM node:16-alpine AS runner
WORKDIR /app

ENV NODE_ENV production
# Uncomment the following line in case you want to disable telemetry during runtime.
# ENV NEXT_TELEMETRY_DISABLED 1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT 3000

ENV NODE_ENV=production

ENV RECAPTCHA_KEY=${RECAPTCHA_KEY}
ENV RECAPTCHA_URL=${RECAPTCHA_URL}

ENV MAIL_HOST=${MAIL_HOST}
ENV MAIL_PASS=${MAIL_PASS}

ENV NEXT_PUBLIC_EMAIL_ADDRESS=${PUBLIC_EMAIL_ADDRESS}
ENV NEXT_PUBLIC_PHONE_NUMBER=${PUBLIC_PHONE_NUMBER}
ENV NEXT_PUBLIC_PROFESSIONAL_NAME=${PUBLIC_PROFESSIONAL_NAME}
ENV NEXT_PUBLIC_RECAPTCHA_KEY=${PUBLIC_RECAPTCHA_KEY}

CMD ["npm", "run", "start"]

# FROM node:16.13.1-alpine3.12 AS npm-deps
# WORKDIR /var/www/counselling-app/

# COPY src/package.json .
# COPY src/. .

# RUN rm -rf .next
# RUN rm -rf node_modules
# RUN rm -rf .env

# RUN npm install
# # CMD ["npm", "run", "dev"]

# # FROM npm-deps as npm-build
# ENV NODE_ENV=production

# ENV RECAPTCHA_KEY=${RECAPTCHA_KEY}
# ENV RECAPTCHA_URL=${RECAPTCHA_URL}

# ENV MAIL_HOST=${MAIL_HOST}
# ENV MAIL_PASS=${MAIL_PASS}

# ENV NEXT_PUBLIC_EMAIL_ADDRESS=${PUBLIC_EMAIL_ADDRESS}
# ENV NEXT_PUBLIC_PHONE_NUMBER=${PUBLIC_PHONE_NUMBER}
# ENV NEXT_PUBLIC_PROFESSIONAL_NAME=${PUBLIC_PROFESSIONAL_NAME}
# ENV NEXT_PUBLIC_RECAPTCHA_KEY=${PUBLIC_RECAPTCHA_KEY}

# RUN npm run build
# CMD ["npm", "run", "start"]